import gspread
from gspread import Client, service_account
from telebot import TeleBot, types
from random_unicode_emoji import random_emoji

from time import sleep
from datetime import datetime, timedelta

import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
def get_client() -> Client:
    return service_account(config.google_creds)

def get_table_by_url(client: Client, table_url) -> gspread.spreadsheet.Spreadsheet:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Google Sheets –ø–æ —Å—Å—ã–ª–∫–µ."""
    return client.open_by_url(table_url)

def get_table_by_id(client: Client, table_id) -> gspread.spreadsheet.Spreadsheet:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Google Sheets –ø–æ ID —Ç–∞–±–ª–∏—Ü—ã."""
    return client.open_by_key(table_id)

# –ú–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è
def get_worksheet_info(table) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è."""
    worksheets = table.worksheets()
    worksheet_info = {
        "count": len(worksheets),
        "names": [worksheet.title for worksheet in worksheets]
    }
    return worksheet_info

def get_lections(date_cell: gspread.cell.Cell, worksheet: gspread.worksheet.Worksheet) -> list:
    '''
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ —è—á–µ–π–∫–µ –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ —Å–ª–æ–≤–∞—Ä–µ–π
    
    –ö–ª—é—á–∏: time, name, cabinet, lecturer
    '''
    height = 1
    while worksheet.cell(date_cell.row + height, date_cell.col).value == None:
        height = height + 1
        if height == 24: break
        sleep(3)
        

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —à–∞–±–ª–æ–Ω—É
    if height % 3 != 0:
        print(f'–ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {date_cell}, {worksheet}')
        return []

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –¥–ª—è –ø–∞—Ä
    lections_count = int(height / 3)
    lections = []

    for lection_number in range(0, lections_count):
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—ã -> —Å–ª–µ–¥—É—é—â–∞—è —è—á–µ–π–∫–∞ —Å–ø—Ä–∞–≤–∞ –∏ —á–µ—Ä–µ–∑ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
        lection_time = worksheet.cell(date_cell.row + (lection_number * 3),
                                    date_cell.col + 1)
        sleep(3)
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–∏ -> —Å–ª–µ–¥—É—é—â–∞—è —è—á–µ–π–∫–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ª–µ–∫—Ü–∏–∏
        lection_name = worksheet.cell(lection_time.row,
                                    lection_time.col + 1)
        sleep(3)
        # –ö–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ª–µ–∫—Ü–∏–∏ -> —Å–ª–µ–¥—É—é—â–∞—è —è—á–µ–π–∫–∞ –≤–Ω–∏–∑ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è
        lection_cabinet = worksheet.cell(lection_name.row + 1,
                                    lection_name.col)
        sleep(3)
        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å -> —Å–ª–µ–¥—É—é—â–∞—è —è—á–µ–π–∫–∞ –≤–Ω–∏–∑ –æ—Ç –∫–∞–±–∏–Ω–µ—Ç–∞
        lection_lecturer = worksheet.cell(lection_cabinet.row + 1,
                                    lection_name.col)
        sleep(3)
        
        lections.append({
            'time': lection_time.value,
            'name': lection_name.value,
            'cabinet': lection_cabinet.value,
            'lecturer': lection_lecturer.value
        })
        
    return lections
        
def get_today_lections(group: dict, table_id: str) -> list:
    '''
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø–∞—Ä–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    '''
    # Google Settings
    client = get_client()
    table = get_table_by_id(client, table_id)
    worksheet = table.worksheet(group['worksheet'])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã
    today = datetime.now().strftime('%d.%m.%Y')
    date_cell = worksheet.find(today)

    if not date_cell:
        print(f'–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç—É –ø–∞—Ä –¥–ª—è: {group['worksheet']}')
        return []
        
    return get_lections(date_cell, worksheet)

def get_tomorrow_lections(group: dict, table_id: str) -> list:
    '''
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø–∞—Ä–∞—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    '''
    # Google Settings
    client = get_client()
    table = get_table_by_id(client, table_id)
    worksheet = table.worksheet(group['worksheet'])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')    
    date_cell = worksheet.find(tomorrow)

    if not date_cell:
        print(f'–ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç—É –ø–∞—Ä –¥–ª—è: {group['worksheet']}')
        return []
        
    return get_lections(date_cell, worksheet)

def notify_today_lections(bot: TeleBot, chat_id: int, lections: list, table_id: str = ''):
    '''
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø–∞—Ä–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    '''
    if len(lections) == 0: return
    
    msg = random_emoji()[0] + ' –ù–µ –∑–∞–±—ã–≤–∞–µ–º, –ø–∞—Ä—ã —Å–µ–≥–æ–¥–Ω—è:\n\n'
    for lection in lections:
        if lection['name'] == None:
            continue
        msg += f'<b>{lection['time']}</b> - '
        msg += f'<i>{lection['name']}</i> '
        msg += f'({lection['lecturer']}): '
        msg += f'{lection['cabinet']}\n\n'
    
    if table_id == '':
        bot.send_message(chat_id, msg)
    else:
        button_link = types.InlineKeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üåê', 
                                                 url=f'https://docs.google.com/spreadsheets/d/{table_id}')
        kbd = types.InlineKeyboardMarkup()
        kbd.add(button_link)
        bot.send_message(chat_id, msg, reply_markup=kbd)
        

def notify_tomorrow_lections(bot: TeleBot, chat_id: int, lections: list, table_id: str = ''):
    '''
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø–∞—Ä–∞—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    '''
    if len(lections) == 0: return
    
    msg = '‚ö†Ô∏è –ó–∞–≤—Ç—Ä–∞ –±—É–¥—É—Ç –ø–∞—Ä—ã:\n\n'
    for lection in lections:
        if lection['name'] == None:
            continue
        msg += f'<b>{lection['time']}</b> - '
        msg += f'<i>{lection['name']}</i> '
        msg += f'({lection['lecturer']}): '
        msg += f'{lection['cabinet']}\n\n'
    
    if table_id == '':
        bot.send_message(chat_id, msg)
    else:
        button_link = types.InlineKeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üåê', 
                                                 url=f'https://docs.google.com/spreadsheets/d/{table_id}')
        kbd = types.InlineKeyboardMarkup()
        kbd.add(button_link)
        bot.send_message(chat_id, msg, reply_markup=kbd)

def check_table():
    '''
    –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ —á–∞—Ç–æ–≤,
    –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    '''
    bot = TeleBot(config.bot_token, parse_mode='HTML')
    
    for group in config.groups:
        notify_today_lections(
            bot,
            group['chat_id'],
            get_today_lections(group, config.table_id),
            config.table_id
        )
        notify_tomorrow_lections(
            bot,
            group['chat_id'],
            get_tomorrow_lections(group, config.table_id),
            config.table_id
        )

if __name__ == '__main__':
    check_table()

